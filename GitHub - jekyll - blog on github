# GitHub - jekyll - blog on github

2012-01-31 12:03:26 +08:00 Tuesday

[http://jekyllrb.com/](http://jekyllrb.com/) | [https://github.com/jekyll/jekyll](https://github.com/jekyll/jekyll) | [http://rubygems.org/gems/jekyll](http://rubygems.org/gems/jekyll)

## jekyllrb.com

    $ gem install jekyll
    $ jekyll new my-awesome-site
    $ cd my-awesome-site
    $ jekyll serve
    # => Now browse to http://localhost:4000

*   2014-02-23 13:27 Sunday

    Transform your plain text into static websites and blogs.

    *   Simple

        No more databases, comment moderation, or pesky updates to install—just your content.

        [How Jekyll works →](http://jekyllrb.com/docs/usage/)

    *   Static

        [Markdown](http://daringfireball.net/projects/markdown/) (or [Textile](http://textile.sitemonks.com/)), [Liquid](http://wiki.shopify.com/Liquid), HTML &amp; CSS go in. Static sites come out ready for deployment.

        [Jekyll template guide →](http://jekyllrb.com/docs/templates/)

    *   Blog-aware

        Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here.

        [Migrate your blog →](http://jekyllrb.com/docs/migrations/)

## github.com/jekyll/jekyll

*   2014-02-23 13:21 Sunday

    Jekyll is a blog-aware, static site generator in Ruby

## rubygems.org/gems/jekyll

*   2012-01-31 12:03

    Jekyll is a simple, blog aware, static site generator.

    gem install jekyll

Gemfile

    gem "jekyll", "~> 1.3.0"

Versions

1.  [1.3.0](http://rubygems.org/gems/jekyll/versions/1.3.0) November 4, 2013 (256 KB)
2.  [1.3.0.rc](http://rubygems.org/gems/jekyll/versions/1.3.0.rc) October 29, 2013 (255 KB)
3.  [1.2.1](http://rubygems.org/gems/jekyll/versions/1.2.1) September 14, 2013 (248 KB)
4.  [1.2.0](http://rubygems.org/gems/jekyll/versions/1.2.0) September 6, 2013 (245 KB)
5.  [1.1.2](http://rubygems.org/gems/jekyll/versions/1.1.2) July 25, 2013 (241 KB)

[Show all versions (44 total)](http://rubygems.org/gems/jekyll/versions)

44 versions since November 22, 2008

1.  [1.3.0](http://rubygems.org/gems/jekyll/versions/1.3.0) November 4, 2013 (256 KB)
2.  ...
3.  [0.12.1](http://rubygems.org/gems/jekyll/versions/0.12.1) February 19, 2013 (60 KB)
4.  [0.12.0](http://rubygems.org/gems/jekyll/versions/0.12.0) December 22, 2012 (60 KB)
5.  [0.11.2](http://rubygems.org/gems/jekyll/versions/0.11.2) December 27, 2011 (52 KB) -> <span class="marker">最初 2012-01-31 应该是这个版本</span>​

## Jekyll

*   2014-02-23 13:42

    如今会自动跳转到 https://github.com/jekyll/jekyll

[https://github.com/mojombo/jekyll](https://github.com/mojombo/jekyll)

By Tom Preston-Werner, Nick Quaranto, and many awesome contributors!

Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind [GitHub Pages](http://pages.github.com/), which you can use to host your project’s page or blog right here from GitHub.

### Getting Started

*   [Install](http://wiki.github.com/mojombo/jekyll/install) the gem
*   Read up about its [Usage](http://wiki.github.com/mojombo/jekyll/usage) and [Configuration](http://wiki.github.com/mojombo/jekyll/configuration)
*   Take a gander at some existing [Sites](http://wiki.github.com/mojombo/jekyll/sites)
*   Fork and [Contribute](http://wiki.github.com/mojombo/jekyll/contribute) your own modifications
*   Have questions? Post them on the [Mailing List](http://groups.google.com/group/jekyll-rb)

https://github.com/mojombo/jekyll/wiki/template-data

https://github.com/shopify/liquid/wiki/liquid-for-designers

https://github.com/mojombo/jekyll/wiki/usage

### Install

The best way to install Jekyll is via RubyGems:

    $ gem install jekyll

    $ gem list jekyll

    *** LOCAL GEMS ***

    jekyll (1.3.0)

### Running Jekyll

Usually this is done through the jekyll executable, which is installed with the gem. In order to get a server up and running with your Jekyll site, run:

    jekyll --server

and then browse to [http://0.0.0.0:4000](http://0.0.0.0:4000/). There's plenty of [configuration options](https://github.com/mojombo/jekyll/wiki/Configuration) available to you as well.

2013-05-07 11:31 Tuesday

    $ jekyll --server
           Deprecation: Jekyll now uses subcommands instead of just switches. Run `jekyll help' to find out more.
    /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/runner.rb:365:in `block in require_program': program version required (Commander::Runner::CommandError)
    from /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/runner.rb:364:in `each'
    from /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/runner.rb:364:in `require_program'
    from /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/runner.rb:52:in `run!'
    from /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/delegates.rb:11:in `run!'
    from /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/commander-4.1.3/lib/commander/import.rb:10:in `block in <top (required)>'

当在一个空目录中执行 jekyll --server 时，会有如下输出

    $ jekyll --server
    Configuration from /Users/mlhch/github/mlhch/_config.yml
    Building site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    Successfully generated site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    [2012-01-31 14:13:05] INFO  WEBrick 1.3.1
    [2012-01-31 14:13:05] INFO  ruby 1.8.7 (2010-01-10) [universal-darwin11.0]
    [2012-01-31 14:13:05] INFO  WEBrick::HTTPServer#start: pid=9023 port=4000

以上是曾经的 ruby 1.8.7 版本下的结果，下面是现在 ruby 1.9.3 版本下的结果。有关 iconv 的错误提示，暂且可以忽略。

    $ jekyll --server
    /Users/mlhch/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': iconv will be deprecated in the future, use String#encode instead.
    WARNING: Could not read configuration. Using defaults (and options).
    No such file or directory - /Users/mlhch/github/mlhch/_config.yml
    Building site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    Successfully generated site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    [2012-08-01 15:09:30] INFO  WEBrick 1.3.1
    [2012-08-01 15:09:30] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.4.0]
    [2012-08-01 15:09:30] INFO  WEBrick::HTTPServer#start: pid=5464 port=4000

查看当前目录下，多了一个 _site 空文件夹。

此时访问 http://localhost:4000，页面显示如下：

    Forbidden

    no access permission to `/'
    WEBrick/1.3.1 (Ruby/1.9.3/2012-04-20) at localhost:4000

这是因为此时 web 根目录是 _site，但是 _site/index.html 并不存在。手动创建 _site/index.html 后刷新 http://localhost:4000，会看到 _site/index.html 被成功访问。但这并不是 jekyll 的目的。正确的做法是在执行 jekyll --server 的目录中创建 index.html，然后重新启动 jekyll --server，则 index.html 经过处理后，自动生成新的 _site/index.html。

## 配置文件 _config.yaml 注意事项

2012-10-23 星期二 今天早上要回家去送奶奶去大姑家过会，然后去登记

exclude : [models] 会排除任何层次目录中的 models 文件夹或文件

exclude : [models/] 会只排除顶层的 models 文件夹

复杂交情待进一步确认。

## _posts 目录下注意事项

2012-10-24 23:25 星期三

yyyy-mm-dd-title.textile 会启动 textile 解析，导致自动添加 <br /> 的问题，改为 yyyy-mm-dd-title.html 就好了

## 错误提示

### Missing dependency: RedCloth

根据提示安装即可

    $ jekyll --server
    WARNING: Could not read configuration. Using defaults (and options).
    No such file or directory - /Users/mlhch/github/mlhch/_config.yml
    Building site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    You are missing a library required for Textile. Please run:
      $ [sudo] gem install RedCloth

    ERROR: YOUR SITE COULD NOT BE BUILT:
    ------------------------------------
    Missing dependency: RedCloth

    $ jekyll --server
    /Users/mlhch/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': iconv will be deprecated in the future, use String#encode instead.
    Configuration from /Users/mlhch/github/mlhch/_config.yml
    Building site: /Users/mlhch/github/mlhch -> /Users/mlhch/github/mlhch/_site
    You are missing a library required for Textile. Please run:
      $ [sudo] gem install RedCloth

    ERROR: YOUR SITE COULD NOT BE BUILT:
    ------------------------------------
    Missing dependency: RedCloth

    $ gem install RedCloth
    Fetching: RedCloth-4.2.9.gem (100%)
    Building native extensions.  This could take a while...
    Successfully installed RedCloth-4.2.9
    1 gem installed
    Installing ri documentation for RedCloth-4.2.9...
    Installing RDoc documentation for RedCloth-4.2.9...

## jekyll 不支持 non-ascii 的 url

*   .rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpservlet/filehandler.rb:385:

              def nondisclosure_name?(name)
                @options[:NondisclosureName].each{|pattern|
        require 'debug'
                  if File.fnmatch(pattern, name, File::FNM_CASEFOLD)
                    return true
                  end
                }
                return false
              end

        (rdb:3) @options
        {:NondisclosureName=>[".ht*", "*~"], :FancyIndexing=>false, :HandlerTable=>{}, :HandlerCallback=>nil, :DirectoryCallback=>nil, :FileCallback=>nil, :UserDir=>nil, :AcceptableLanguages=>[]}
        (rdb:3) name
        "_site"
        (rdb:3) pattern
        ".ht*"

*   .rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpservlet/filehandler.rb:300:

              def set_filename(req, res)
                res.filename = @root.dup
                path_info = req.path_info.scan(%r|/[^/]*|)

                path_info.unshift("")  # dummy for checking @root dir
                while base = path_info.first
                  break if base == "/"
                  break unless File.directory?(File.expand_path(res.filename + base))
                  shift_path_info(req, res, path_info)
        #300      call_callback(:DirectoryCallback, req, res)
                end

                if base = path_info.first
                  if base == "/"
                    if file = search_index_file(req, res)
                      shift_path_info(req, res, path_info, file)
                      call_callback(:FileCallback, req, res)
                      return true
                    end
                    shift_path_info(req, res, path_info)
                  elsif file = search_file(req, res, base)
                    shift_path_info(req, res, path_info, file)
                    call_callback(:FileCallback, req, res)
                    return true
                  else
                    raise HTTPStatus::NotFound, "`#{req.path}' not found."
                  end
                end

                return false
              end

        (rdb:3) path_info
        ["/article", "/jekyll - \xE7\x94\xA8 github \xE5\x81\x9A\xE5\x8D\x9A\xE5\xAE\xA2.html"]

        (rdb:3) path_info
        ["/jekyll - \xE7\x94\xA8 github \xE5\x81\x9A\xE5\x8D\x9A\xE5\xAE\xA2.html"]

*   .rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpservlet/filehandler.rb:371:

              def call_callback(callback_name, req, res)
        #       if cb = @options[callback_name]
                  cb.call(req, res)
                end
              end

        (rdb:3) @options[:DirectoryCallback]
        nil

*   .rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/httpservlet/filehandler.rb:349:

              def search_file(req, res, basename)
        #       langs = @options[:AcceptableLanguages]
                path = res.filename + basename
                if File.file?(path)
                  return basename
                elsif langs.size > 0
                  req.accept_language.each{|lang|
                    path_with_lang = path + ".#{lang}"
                    if langs.member?(lang) && File.file?(path_with_lang)
                      return basename + ".#{lang}"
                    end
                  }
                  (langs - req.accept_language).each{|lang|
                    path_with_lang = path + ".#{lang}"
                    if File.file?(path_with_lang)
                      return basename + ".#{lang}"
                    end
                  }
                end
                return nil
              end

        (rdb:3) @options[:AcceptableLanguages]
        []
        (rdb:3) res.filename
        "/Library/WebServer/Documents/mlhch/_site/article"
        (rdb:3) basename
        "/jekyll - \xE7\x94\xA8 github \xE5\x81\x9A\xE5\x8D\x9A\xE5\xAE\xA2.html"
        (rdb:3) File.file?(path)
        false

*   问题最终归结为 ruby 的 File.file?(path) 方法中不支持 path 为中文等的 non-ascii 字符。

## Contribute

So you’ve got an awesome idea to throw into Jekyll. Great! Please keep the following in mind:

*   Contributions will not be accepted without tests.
*   If you’re creating a small fix or patch to an existing feature, just a simple test will do. Please stay in the confines of the current test suite and use [Shoulda](http://github.com/thoughtbot/shoulda/tree/master) and [RR](http://github.com/btakita/rr/tree/master).
*   If it’s a brand new feature, make sure to create a new [Cucumber](https://github.com/cucumber/cucumber/) feature and reuse steps where appropriate. Also, whipping up some documentation in your fork’s wiki would be appreciated, and once merged it will be transferred over to the main wiki.

### Test Dependencies

To run the test suite and build the gem you’ll need to install Jekyll’s dependencies. Jekyll uses Bundler, so a quick run of the bundle command and you’re all set!

    $ bundle

Before you start, run the tests and make sure that they pass (to confirm your environment is configured properly):

    $ rake test
    $ rake features

### Workflow

Here’s the most direct way to get your work merged into the project:

1.  Fork the project
2.  Clone down your fork ( git clone git://github.com/<username>/jekyll.git )
3.  Create a topic branch to contain your change ( git checkout -b my_awesome_feature )
4.  Hack away, add tests. Not necessarily in that order.
5.  Make sure everything still passes by running rake
6.  If necessary, rebase your commits into logical chunks, without errors
7.  Push the branch up ( git push origin my_awesome_feature )
8.  Create an issue with a description and link to your branch

### Gotchas

*   If you want to bump the gem version, please put that in a separate commit. This way, the maintainers can control when the gem gets released.
*   Try to keep your patch(es) based from the latest commit on mojombo/jekyll. The easier it is to apply your work, the less work the maintainers have to do, which is always a good thing.
*   Please don’t tag your GitHub issue with [fix], [feature], etc. The maintainers actively read the issues and will label it once they come across it.

## Finally…

Thanks! Hacking on Jekyll should be fun, and if for some reason it’s a pain to do let us know so we can fix it.

## Research

2013-05-07 16:45

*   $ jekyll build -> /usr/local/Cellar/ruby/1.9.3-p286/bin/jekyll build

*   /usr/local/Cellar/ruby/1.9.3-p286/lib/ruby/gems/1.9.1/gems/jekyll-1.0.0/bin/jekyll

    *   command :build do |c|

    *   options = Jekyll.configuration(options)

        *   module Jekyll

                  def self.configuration(override)
                    config = Configuration[Configuration::DEFAULTS]
                    override = Configuration[override].stringify_keys
                    config = config.read_config_files(config.config_files(override))

                    # Merge DEFAULTS < _config.yml < override
                    config = config.deep_merge(override).stringify_keys
                    set_timezone(config['timezone']) if config['timezone']

                    config
                  end

        *   /lib/jekyll/configuration.rb

                    def read_config_file(file)
                      next_config = YAML.safe_load_file(file)
                      raise "Configuration file: (INVALID) #{file}".yellow if !next_config.is_a?(Hash)
                      Jekyll::Logger.info "Configuration file:", file
                      next_config
                    end

                Configuration file: /Library/WebServer/Documents/journal/_config.yml

    *   Jekyll::Commands::Build.process(options)

            module Jekyll
              module Commands
                class Build < Command
                  def self.process(options);return;
                    site = Jekyll::Site.new(options)

                    self.build(site, options)
                    self.watch(site, options) if options['watch']
                  end

        *   /lib/jekyll/site.rb, Jekyll::Site.new(options)

                module Jekyll
                  class Site
                    def initialize(config)
                      self.config          = config.clone
                ...
                require "pp";pp config;return;

                      self.reset
                      self.setup
                    end

            require "pp";pp config

                {"source"=>"/Library/WebServer/Documents/journal",
                "destination"=>"/Library/WebServer/Documents/journal/_site",
                "plugins"=>"_plugins",
                "layouts"=>"_layouts",
                "keep_files"=>[".git", ".svn"],
                "timezone"=>nil,
                "safe"=>false,
                "show_drafts"=>nil,
                "limit_posts"=>0,
                "lsi"=>false,
                "future"=>true,
                "pygments"=>true,
                "markdown"=>"maruku",
                "permalink"=>"/article/:title.html",
                "baseurl"=>"/",
                "include"=>[".htaccess"],
                "exclude"=>["views", "models/", "app", "protected"],
                "paginate_path"=>"page:num",
                "markdown_ext"=>"markdown,mkd,mkdn,md",
                "textile_ext"=>"textile",
                "port"=>"4000",
                "host"=>"0.0.0.0",
                "excerpt_separator"=>"\n\n",
                "maruku"=>
                  {"use_tex"=>false,
                   "use_divs"=>false,
                   "png_engine"=>"blahtex",
                   "png_dir"=>"images/latex",
                   "png_url"=>"/images/latex"},
                "rdiscount"=>{"extensions"=>[]},
                "redcarpet"=>{"extensions"=>[]},
                "kramdown"=>
                  {"auto_ids"=>true,
                   "footnote_nr"=>1,
                   "entity_output"=>"as_char",
                   "toc_levels"=>"1..6",
                   "smart_quotes"=>"lsquo,rsquo,ldquo,rdquo",
                   "use_coderay"=>false,
                   "coderay"=>
                    {"coderay_wrap"=>"div",
                     "coderay_line_numbers"=>"inline",
                     "coderay_line_number_start"=>1,
                     "coderay_tab_width"=>4,
                     "coderay_bold_every"=>10,
                     "coderay_css"=>"style"}},
                "redcloth"=>{"hard_breaks"=>true},
                "sitename"=>"mlhch's Journal",
                "js"=>[]}

        *   /lib/jekyll/commands/build.rb, self.build(site, options)

                      def self.build(site, options)
                        source = options['source']
                        destination = options['destination']
                        Jekyll::Logger.info "Source:", source
                        Jekyll::Logger.info "Destination:", destination
                        print Jekyll::Logger.formatted_topic "Generating..."
                #       self.process_site(site)
                        puts "done."
                      end

                Configuration file: /Library/WebServer/Documents/journal/_config.yml
                            Source: /Library/WebServer/Documents/journal
                       Destination: /Library/WebServer/Documents/journal/_site
                      Generating... done.

            *   /lib/jekyll/command.rb, self.process_site(site)

                    module Jekyll
                      class Command
                        def self.process_site(site)
                          site.process
                        rescue Jekyll::FatalException => e
                          puts
                          Jekyll::Logger.error "ERROR:", "YOUR SITE COULD NOT BE BUILT:"
                          Jekyll::Logger.error "", "------------------------------------"
                          Jekyll::Logger.error "", e.message
                          exit(1)
                        end
                      end
                    end

            *   /lib/jekyll/site.rb, site.process

                        def process
                          self.reset
                          self.read
                          self.generate
                          self.render
                          self.cleanup
                          self.write
                        end

*   /lib/jekyll/site.rb, self.read

            def read
              self.read_layouts
              self.read_directories
            end

            def read_layouts
              base = File.join(self.source, self.config['layouts'])
              return unless File.exists?(base)
              entries = []
              Dir.chdir(base) { entries = filter_entries(Dir['*.*']) }

              entries.each do |f|
                name = f.split(".")[0..-2].join(".")
                self.layouts[name] = Layout.new(self, base, f)
                Jekyll::Logger.info "Layout: ", "#{name}, #{f}"
              end
            end

                   Layout:  post-edit, post-edit.html
                   Layout:  post, post.html