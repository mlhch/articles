<h1>html2canvas</h1>

<p>2014-01-16 13:31 Thursday</p>

<p><a href="http://html2canvas.hertzen.com/" target="_blank">http://html2canvas.hertzen.com/</a></p>

<p>This script allows you to take &quot;screenshots&quot; of webpages or parts of it, directly on the users browser. The screenshot is based on the DOM and as such may not be 100% accurate to the real representation as it does not make an actual screenshot, but builds the screenshot based on the information available on the page.</p>

<h2>Download</h2>

<p><a href="https://github.com/niklasvh/html2canvas/releases" target="_blank">https://github.com/niklasvh/html2canvas/releases</a></p>

<p><a href="https://github.com/niklasvh/html2canvas/releases/tag/0.4.1">v0.4.1 - 7.9.2013</a></p>

<p><a href="https://github.com/niklasvh">niklasvh</a>&nbsp;released this&nbsp;4 months ago&nbsp;&middot;&nbsp;<a href="https://github.com/niklasvh/html2canvas/compare/0.4.1...master">21 commits</a>&nbsp;to master since this release</p>

<ul>
	<li>Added support for bower</li>
	<li>Improved z-index ordering</li>
	<li>Basic implementation for CSS transformations</li>
	<li>Fixed inline text in top element</li>
	<li>Basic implementation for text-shadow</li>
</ul>

<ul>
	<li><a href="https://github.com/niklasvh/html2canvas/releases/download/0.4.1/html2canvas.js">&nbsp;html2canvas.js</a>&nbsp;<a href="https://github.com/niklasvh/html2canvas/archive/0.4.1.zip">&nbsp;Source code (zip)</a>&nbsp;<a href="https://github.com/niklasvh/html2canvas/archive/0.4.1.tar.gz">&nbsp;Source code (tar.gz)</a></li>
</ul>

<p>或者直接在项目中使用 bower 来安装</p>

<pre>
$ bower install html2canvas --save</pre>

<p>完成后在 build 目录下有 html2canvas.js 和 html2canvas.min.js 可用。</p>

<h2>Introduction</h2>

<p>Before you get started with the script, there are a few things that are good to know regarding the script and some of its limitations.</p>

<h3>How it works</h3>

<p>The script traverses through the DOM of the page it is loaded on. It gathers information on all the elements there, which it then uses to build a representation of the page. In other words, it does not actually take a screenshot of the page, but builds a representation of it based on the properties it reads from the DOM.</p>

<p>As a result, it is only able to render correctly properties that it understands, meaning there are many CSS properties which do not work.</p>

<h3>Limitations</h3>

<p>All the images that the script uses need to reside under the&nbsp;<a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin</a>&nbsp;for it to be able to read them without the assistance of a&nbsp;<a href="http://html2canvas.hertzen.com/documentation.html#">proxy</a>. Similarly, if you have other&nbsp;canvas&nbsp;elements on the page, which have been tainted with cross-origin content, they will become dirty and no longer readable by html2canvas.</p>

<p>The script doesn&#39;t render plugin content such as Flash or Java applets. It doesn&#39;t render&nbsp;iframe&nbsp;content either, unless the content resides under the same origin.</p>

<h3>Getting started</h3>

<p>To run html2canvas on an&nbsp;element&nbsp;with some&nbsp;options&nbsp;simply call:</p>

<pre>
html2canvas(element, options);</pre>

<p>The rendered&nbsp;canvas&nbsp;is provided in the callback event&nbsp;onrendered, as such:</p>

<pre>
html2canvas(element, {
  onrendered: function(canvas) {
    // canvas is the final rendered &lt;canvas&gt; element
  }
});</pre>

<h3>Available options</h3>

<p>The options variable is an&nbsp;object&nbsp;which accepts the following parameters:</p>

<table border="1" cellpadding="3" cellspacing="1">
	<thead>
		<tr>
			<th>Name</th>
			<th>Type</th>
			<th>Default</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>allowTaint</td>
			<td>boolean</td>
			<td>false</td>
			<td>Whether to allow cross-origin images to taint the canvas</td>
		</tr>
		<tr>
			<td>background</td>
			<td>string</td>
			<td>#fff</td>
			<td>Canvas background color, if none is specified in DOM. Set undefined for transparent</td>
		</tr>
		<tr>
			<td>height</td>
			<td>number</td>
			<td>null</td>
			<td>Define the heigt of the canvas in pixels. If null, renders with full height of the window.</td>
		</tr>
		<tr>
			<td>letterRendering</td>
			<td>boolean</td>
			<td>false</td>
			<td>Whether to render each letter seperately. Necessary ifletter-spacing&nbsp;is used.</td>
		</tr>
		<tr>
			<td>logging</td>
			<td>boolean</td>
			<td>false</td>
			<td>Whether to log events in the console.</td>
		</tr>
		<tr>
			<td>proxy</td>
			<td>string</td>
			<td>undefined</td>
			<td>Url to the proxy which is to be used for loading cross-origin images. If left empty, cross-origin images won&#39;t be loaded.</td>
		</tr>
		<tr>
			<td>taintTest</td>
			<td>boolean</td>
			<td>true</td>
			<td>Whether to test each image if it taints the canvas before drawing them</td>
		</tr>
		<tr>
			<td>timeout</td>
			<td>number</td>
			<td>0</td>
			<td>Timeout for loading images, in milliseconds. Setting it to 0 will result in no timeout.</td>
		</tr>
		<tr>
			<td>width</td>
			<td>number</td>
			<td>null</td>
			<td>Define the width of the canvas in pixels. If null, renders with full width of the window.</td>
		</tr>
		<tr>
			<td>useCORS</td>
			<td>boolean</td>
			<td>false</td>
			<td>Whether to attempt to load cross-origin images as CORS served, before reverting back to proxy</td>
		</tr>
	</tbody>
</table>
