<h1>PHP PHP-FPM</h1>

<p>2014-01-31 15:45 Friday</p>

<p><a href="http://php-fpm.org/" target="_blank">http://php-fpm.org/</a></p>

<blockquote>
<p>PHP-FPM - A simple and robust FastCGI Process Manager for PHP</p>
</blockquote>

<h2>What is PHP-FPM?</h2>

<p>PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features useful for sites of any size, especially busier sites.<br />
<br />
These features include:</p>

<ul>
	<li>Adaptive process spawning (NEW!)</li>
	<li>Basic statistics (ala Apache&#39;s mod_status) (NEW!)</li>
	<li>Advanced process management with graceful stop/start</li>
	<li>Ability to start workers with different uid/gid/chroot/environment and different php.ini (replaces safe_mode)</li>
	<li>Stdout &amp; stderr logging</li>
	<li>Emergency restart in case of accidental opcode cache destruction</li>
	<li>Accelerated upload support</li>
	<li>Support for a &quot;slowlog&quot;</li>
	<li>Enhancements to FastCGI, such as fastcgi_finish_request() - a special function to finish request &amp; flush all data while continuing to do something time-consuming (video converting, stats processing, etc.)</li>
</ul>

<p>... and much more.</p>

<p>It was not designed with virtual hosting in mind (large amounts of pools) however it can be adapted for any usage model.</p>

<h2>News</h2>

<p>Nov 29, 2011<br />
<a href="http://www.php.net/archive/2011.php#id2011-11-29-1" target="_blank">It&#39;s official</a>. PHP-FPM is no longer marked as &quot;experimental&quot; as of PHP 5.4.0RC2.</p>

<h2>FastCGI 进程管理器（FPM）</h2>

<p><a href="http://www.php.net/manual/zh/install.fpm.php" target="_blank">http://www.php.net/manual/zh/install.fpm.php</a></p>

<p>FPM（FastCGI 进程管理器）用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。</p>

<p>它的功能包括：</p>

<ul>
	<li>支持平滑停止/启动的高级进程管理功能；</li>
	<li>可以工作于不同的 uid/gid/chroot 环境下，并监听不同的端口和使用不同的 php.ini 配置文件（可取代 safe_mode 的设置）</li>
	<li>stdout 和 stderr 日志记录;</li>
	<li>在发生意外情况的时候能够重新启动并缓存被破坏的 opcode;</li>
	<li>文件上传优化支持;</li>
	<li>&quot;慢日志&quot; - 记录脚本（不仅记录文件名，还记录 PHP backtrace 信息，可以使用 ptrace或者类似工具读取和分析远程进程的运行数据）运行所导致的异常缓慢;</li>
	<li><a href="http://www.php.net/manual/zh/function.fastcgi-finish-request.php">fastcgi_finish_request()</a>&nbsp;- 特殊功能：用于在请求完成和刷新数据后，继续在后台执行耗时的工作（录入视频转换、统计处理等）</li>
	<li>动态／静态子进程产生；</li>
	<li>基本 SAPI 运行状态信息（类似Apache的 mod_status）；</li>
	<li>基于 php.ini 的配置文件。</li>
</ul>

<h3>安装-从源代码编译</h3>

<p>编译 PHP 时需要&nbsp;--enable-fpm&nbsp;配置选项来激活 FPM 支持。</p>

<p>以下为 FPM 编译的具体配置参数（全部为可选参数）：</p>

<ul style="list-style-type:circle">
	<li>--with-fpm-user&nbsp;- 设置 FPM 运行的用户身份（默认 - nobody）</li>
	<li>--with-fpm-group&nbsp;- 设置 FPM 运行时的用户组（默认 - nobody）</li>
</ul>

<h2>php-fpm on Mac OS</h2>

<p>2014-02-03 21;46 Monday</p>

<p>brew install php54 or php55 后, php-fpm 就可用了，但不像 CentOS 上有 service php-fpm start/stop/restart 等可用。尝试直接运行 php-fpm 后提示没有 /etc/php-fpm.conf：</p>

<pre>
$ php-fpm
[03-Feb-2014 21:50:07] ERROR: failed to open configuration file &#39;/private/etc/php-fpm.conf&#39;: No such file or directory</pre>

<p>看到文件 /etc/php-fpm.conf.default 存在，所以直接拷贝并重命名为 /etc/php-fpm.conf 即可。</p>

<p>接着又提示日志文件不存在，不可写，所以手动创建如下文件并设置可写权限。</p>

<pre>
/usr/var/log/php-fpm.log</pre>

<p>加 sudo 执行后，如下通知就不会再提示：</p>

<pre>
$ php-fpm
[03-Feb-2014 21:54:01] NOTICE: [pool www] &#39;user&#39; directive is ignored when FPM is not running as root
[03-Feb-2014 21:54:01] NOTICE: [pool www] &#39;group&#39; directive is ignored when FPM is not running as root</pre>

<p>这就好了。</p>

<h2>yum install php-fpm</h2>

<p>编辑文件 /etc/php-fpm.d/www.conf 可进行端口配置等等。</p>

<pre>
; The address on which to accept FastCGI requests.
; Valid syntaxes are:
;   &#39;ip.add.re.ss:port&#39;    - to listen on a TCP socket to a specific address on
;                            a specific port;
;   &#39;port&#39;                 - to listen on a TCP socket to all addresses on a
;                            specific port;
;   &#39;/path/to/unix/socket&#39; - to listen on a unix socket.
; Note: This value is mandatory.
listen = 127.0.0.1:50001

; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user&#39;s group
;       will be used.
; RPM: apache Choosed to be able to access some dir as httpd
user = nginx
; RPM: Keep a group allowed to write in log dir.
group = nginx</pre>

<h2>CGI,&nbsp;FastCGI, PHP-CGI, PHP-FPM, Spawn-FCGI？</h2>

<ul>
	<li>
	<p>什么是CGI</p>

	<p>CGI全称是&ldquo;公共网关接口&rdquo;(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行&ldquo;交谈&rdquo;的一种工具，其程序须运行在网络服务器上。</p>

	<p>CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等</p>
	</li>
	<li>
	<p>什么是FastCGI</p>

	<p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。</p>

	<p>FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</p>
	</li>
	<li>
	<p>FastCGI与CGI特点</p>

	<ul>
		<li>如CGI，FastCGI也具有语言无关性.</li>
		<li>如CGI，FastCGI在进程中的应用程序，独立于核心web服务器运行,提供了一个比API更安全的环境。(APIs把应用程序的代码与核心的web服务器链接在一起，这意味着在一个错误的API的应用程序可能会损坏其他应用程序或核心服务器; 恶意的API的应用程序代码甚至可以窃取另一个应用程序或核心服务器的密钥。)</li>
		<li>FastCGI技术目前支持语言有：C/C++、Java、Perl、Tcl、Python、SmallTalk、Ruby等。相关模块在Apache, ISS, Lighttpd等流行的服务器上也是可用的。</li>
		<li>如CGI，FastCGI的不依赖于任何Web服务器的内部架构，因此即使服务器技术的变化, FastCGI依然稳定不变。</li>
	</ul>
	</li>
	<li>
	<p>FastCGI的工作原理</p>

	<ul>
		<li>Web Server启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module)</li>
		<li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web Server的连接。</li>
		<li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li>
		<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</li>
		<li>在上述情况中，你可以想象CGI通常有多慢。每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展并重初始化全部数据结构。使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</li>
	</ul>
	</li>
	<li>
	<p>FastCGI&nbsp;的不足</p>

	<p>因为是多进程，所以比CGI多线程消耗更多的服务器内存，PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。</p>

	<p>Nginx 0.8.46+PHP 5.2.14(FastCGI)服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存（15M*10=150M），开启的64个php-cgi进程消耗1280M内存（20M*64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M。</p>
	</li>
	<li>
	<p>什么是PHP-CGI</p>

	<p>PHP-CGI是PHP自带的FastCGI管理器。启动PHP-CGI，使用如下命令：</p>

	<pre>
php-cgi -b 127.0.0.1:9000</pre>
	</li>
	<li>PHP-CGI的不足
	<ol>
		<li>php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启</li>
		<li>直接杀死php-cgi进程,php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题,守护进程会平滑从新生成新的子进程。）</li>
	</ol>
	</li>
	<li>
	<p>什么是PHP-FPM</p>

	<p>PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的,可以在 http://php-fpm.org/download下载得到.</p>

	<p>PHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。</p>

	<p>现在我们可以在最新的PHP 5.3.2的源码树里下载得到直接整合了PHP-FPM的分支，据说下个版本会融合进PHP的主分支去。相对Spawn-FCGI，PHP-FPM在CPU和内存方面的控制都更胜一筹，而且前者很容易崩溃，必须用crontab进行监控，而PHP-FPM则没有这种烦恼。</p>

	<p>PHP5.3.3已经集成php-fpm了，不再是第三方的包了。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多有点，所以被PHP官方收录了。在./configure的时候带 &ndash;enable-fpm参数即可开启PHP-FPM。</p>

	<p>使用PHP-FPM来控制PHP-CGI的FastCGI进程</p>

	<pre>
/usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}
&nbsp;
--start 启动php的fastcgi进程
--stop 强制终止php的fastcgi进程
--quit 平滑终止php的fastcgi进程
--restart 重启php的fastcgi进程
--reload 重新平滑加载php的php.ini
--logrotate 重新启用log文件</pre>
	</li>
	<li>
	<p>什么是Spawn-FCGI</p>

	<p>Spawn-FCGI是一个通用的FastCGI管理服务器，它是lighttpd中的一部份，很多人都用Lighttpd的Spawn-FCGI进行FastCGI模式下的管理工作，不过有不少缺点。而PHP-FPM的出现多少缓解了一些问题，但PHP-FPM有个缺点就是要重新编译，这对于一些已经运行的环境可能有不小的风险(refer)，在php 5.3.3中可以直接使用PHP-FPM了。</p>

	<p>Spawn-FCGI目前已经独成为一个项目，更加稳定一些，也给很多Web 站点的配置带来便利。已经有不少站点将它与nginx搭配来解决动态网页。</p>

	<p>最新的lighttpd也没有包含这一块了(http://www.lighttpd.net/search?q=Spawn-FCGI)，但可以在以前版本中找到它。在lighttpd-1.4.15版本中就包含了(http://www.lighttpd.net/download/lighttpd-1.4.15.tar.gz)</p>

	<p>目前Spawn-FCGI的下载地址是http://redmine.lighttpd.net/projects/spawn-fcgi，最新版本是http://www.lighttpd.net/download/spawn-fcgi-1.6.3.tar.gz</p>

	<p>注：最新的Spawn-FCGI可以到lighttpd.net网站搜索&ldquo;Spawn-FCGI&rdquo;找到它的最新版本发布地址。下面我们就可以使用Spawn-FCGI来控制php-CGI的FastCGI进程了</p>

	<pre>
/usr/local/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -C 5 -u www-data -g www-data -f /usr/bin/php-CGI
</pre>

	<p>参数含义如下:</p>

	<p>-f&nbsp;指定调用FastCGI的进程的执行程序位置，根据系统上所装的PHP的情况具体设置<br />
	-a&nbsp;绑定到地址addr<br />
	-p&nbsp;绑定到端口port<br />
	-s&nbsp;绑定到unix socket的路径path<br />
	-C&nbsp;指定产生的FastCGI的进程数，默认为5(仅用于PHP)<br />
	-P&nbsp;指定产生的进程的PID文件路径<br />
	-u和-g FastCGI使用什么身份(-u 用户 -g 用户组)运行，Ubuntu下可以使用www-data，其他的根据情况配置，如nobody、apache等</p>
	</li>
	<li>
	<p>PHP-FPM与spawn-CGI对比测试</p>

	<p>PHP-FPM的使用非常方便,配置都是在PHP-FPM.ini的文件内，而启动、重启都可以从php/sbin/PHP-FPM中进行。更方便的是修改php.ini后可以直接使用PHP-FPM reload进行加载，无需杀掉进程就可以完成php.ini的修改加载</p>

	<p>结果显示使用PHP-FPM可以使php有不小的性能提升。PHP-FPM控制的进程cpu回收的速度比较慢,内存分配的很均匀。</p>

	<p>Spawn-FCGI控制的进程CPU下降的很快,而内存分配的比较不均匀。有很多进程似乎未分配到,而另外一些却占用很高。可能是由于进程任务分配的不均匀导致的.而这也导致了总体响应速度的下降。而PHP-FPM合理的分配，导致总体响应的提到以及任务的平均。</p>
	</li>
	<li>
	<p>PHP-FPM与Spawn-FCGI功能比较</p>

	<p>http://php-fpm.org/about/</p>

	<p>PHP-FPM、Spawn-FCGI都是守护php-cgi的进程管理器。</p>
	</li>
</ul>
