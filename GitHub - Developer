# GitHub - Developer

2014-02-20 20:29 Thursday

[http://developer.github.com/](http://developer.github.com/)

> Leverage the power of GitHub in your app

Get started with one of our guides, or jump straight into the API documentation.

[Browse the documentation](http://developer.github.com/v3/)

*   [Get Started](http://developer.github.com/guides/)

    New to the GitHub API? With these guides you’ll be up and running in a snap.

*   [Libraries](http://developer.github.com/libraries/)

    We've got you covered. Use the GitHub API in your favorite language.

*   [Support](http://github.com/contact)

    Are you stuck? Already tried our [troubleshooting guide](http://developer.github.com/v3/troubleshooting/)? Talk to a supportocat.

## Browse the documentation

[http://developer.github.com/v3/](http://developer.github.com/v3/)

## Getting Started

[http://developer.github.com/guides/getting-started/](http://developer.github.com/guides/getting-started/)

### Overview

Most applications will use an existing [wrapper library](http://developer.github.com/libraries/) in the language of your choice, but it’s important to familiarize yourself with the underlying API HTTP methods first.

There's no easier way to kick the tires than through [cURL](http://curl.haxx.se/).

### Hello World

Let’s start by testing our setup. Open up a command prompt and enter the following command (without the $):

    $ curl https://api.github.com/zen

    Keep it logically awesome.

The response will be a random selection from our design philosophies.

Next, let's GET your [GitHub profile](http://developer.github.com/v3/users/#get-a-single-user):

    # GET /users/mlhch
    $ curl https://api.github.com/users/mlhch
    {
      "login": "mlhch",
      "id": 744164,
      "avatar_url": "https://gravatar.com/avatar/cbe21c3c69d013ba9e76efd303d33782?d=https%3A%2F%2Fidenticons.github.com%2F5e41570e891a163463bf5f299fdf56c0.png&r=x",
      "gravatar_id": "cbe21c3c69d013ba9e76efd303d33782",
      "url": "https://api.github.com/users/mlhch",
      "html_url": "https://github.com/mlhch",
      "followers_url": "https://api.github.com/users/mlhch/followers",
      "following_url": "https://api.github.com/users/mlhch/following{/other_user}",
      "gists_url": "https://api.github.com/users/mlhch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mlhch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mlhch/subscriptions",
      "organizations_url": "https://api.github.com/users/mlhch/orgs",
      "repos_url": "https://api.github.com/users/mlhch/repos",
      "events_url": "https://api.github.com/users/mlhch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mlhch/received_events",
      "type": "User",
      "site_admin": false,
      "name": "Ma Lian",
      "company": null,
      "blog": null,
      "location": null,
      "email": "malhch@gmail.com",
      "hireable": false,
      "bio": null,
      "public_repos": 8,
      "public_gists": 0,
      "followers": 0,
      "following": 0,
      "created_at": "2011-04-21T16:17:27Z",
      "updated_at": "2014-02-20T07:44:12Z"
    }

Mmmmm, tastes like [JSON](http://en.wikipedia.org/wiki/JSON). Let's add the -i flag to include headers:

    $ curl -i https://api.github.com/users/mlhch
    HTTP/1.1 200 OK

    HTTP/1.1 200
    Status: 200 OK
    X-Ratelimit-Remaining: 55
    <span class="marker">X-Github-Media-Type: github.beta</span>
    X-Content-Type-Options: nosniff
    Access-Control-Expose-Headers: ETag, Link, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
    X-Github-Request-Id: 0823C930:3A70:6B1E98:5305FA63
    Access-Control-Allow-Credentials: true
    Vary: Accept, Accept-Encoding
    Content-Length: 1328
    Server: GitHub.com
    Last-Modified: Thu, 20 Feb 2014 07:44:12 GMT
    Via: HTTP/1.1 GWA
    Etag: "6355794f9fe9d96b25f19fa6f84fc8ce"
    Cache-Control: public, max-age=60, s-maxage=60
    Date: Thu, 20 Feb 2014 12:51:47 GMT
    Access-Control-Allow-Origin: *
    Content-Type: application/json; charset=utf-8
    X-Ratelimit-Limit: 60
    X-Ratelimit-Reset: 1392902648

    {
      "login": "mlhch",
      "id": 744164,
      ...
    }

There are a few interesting bits in the response headers. As expected, the Content-Type is application/json.

<span class="marker">Any headers beginning with X- are custom headers</span>, and are not included in the HTTP spec. Let's take a look at a few of them:

*   X-GitHub-Media-Type has a value of github.beta. This lets us know the [media type](http://developer.github.com/v3/media/) for the response. Media types have helped us version our output in API v3. We'll talk more about that later.
*   Take note of the X-RateLimit-Limit and X-RateLimit-Remaining headers. This pair of headers indicate [how many requests a client can make](http://developer.github.com/v3/#rate-limiting) in a rolling time period (typically an hour) and how many of those requests the client has already spent.

## Authentication

Unauthenticated clients can make 60 requests per hour. To get more, we’ll need to authenticate. In fact, doing anything interesting with the GitHub API requires [authentication](http://developer.github.com/v3/#authentication).

### Basic

The easiest way to authenticate with the GitHub API is by simply using your GitHub username and password via Basic Authentication.

    $ curl -i -u <your_username> https://api.github.com/users/defunkt

    Enter host password for user '<your_username>':

The -u flag sets the username, and cURL will prompt you for the password. You can use -u "username:password" to avoid the prompt, but this leaves your password in shell history and isn’t recommended. When authenticating, you should see your rate limit <span class="marker">bumped to 5,000 requests an hour</span>, as indicated in the X-RateLimit-Limit header.

In addition to just getting more calls per hour, authentication is the key to reading and writing private information via the API.

### Two-factor authentication

If you have [two-factor authentication](https://help.github.com/articles/about-two-factor-authentication) enabled, the API will return a 401 Unauthorized error code for the above request (and every other API request):

    $ curl -i -u <your_username> https://api.github.com/users/defunkt

    Enter host password for user '<your_username>':

    HTTP/1.1 401 Unauthorized
    X-GitHub-OTP: required; :2fa-type

    {
      "message": "Must specify two-factor authentication OTP code.",
      "documentation_url": "http://developer.github.com/v3/auth#working-with-two-factor-authentication"
    }

The easiest way to get around that error is to create an OAuth token and use OAuth authentication instead of Basic Authentication. See the [OAuth section](http://developer.github.com/guides/getting-started/#oauth) below for more information.

### Get your own user profile

When properly authenticated, you can take advantage of the permissions associated with your GitHub account. For example, try getting [your own user profile](http://developer.github.com/v3/users/#get-the-authenticated-user):

    $ curl -i -u <your_username> https://api.github.com/user

    {
      ...
      "plan": {
        "space": 2516582,
        "collaborators": 10,
        "private_repos": 20,
        "name": "medium"
      }
      ...
    }

This time, in addition to the same set of public information we retrieved for [@defunkt](https://github.com/defunkt) earlier, you should also see the non-public information for your user profile. For example, you'll see a planobject in the response which gives details about the GitHub plan for the account.

### OAuth

While convenient, Basic Authentication isn’t ideal because you shouldn’t give your GitHub username and password to anyone. Applications that need to read or write private information using the API on behalf of another user should use [OAuth](http://developer.github.com/v3/oauth/).

Instead of usernames and passwords, OAuth uses tokens. Tokens provide two big features:

*   Revokable access: users can revoke authorization to third party apps at any time
*   Limited access: users can review the specific access that a token will provide before authorizing a third party app

Normally, tokens are created via a [web flow](http://developer.github.com/v3/oauth/#web-application-flow). An application sends users to GitHub to log in. GitHub then presents a dialog indicating the name of the app, as well as the level of access the app has once it's authorized by the user. After a user authorizes access, GitHub redirects the user back to the application:

[[http://developer.github.com/images/oauth_prompt.png](http://developer.github.com/images/oauth_prompt.png)]

 However, you don't need to set up the entire web flow to begin working with OAuth tokens. An easier way to get a token is to [create a Personal token](https://help.github.com/articles/creating-an-access-token-for-command-line-use) via your [Application settings page](https://github.com/settings/applications):

[[http://developer.github.com/images/personal_token.png](http://developer.github.com/images/personal_token.png)]

Also, the [Authorizations API](http://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization) makes it simple to use Basic Authentication to create an OAuth token. Try pasting and running the following command:

    $ curl -i -u <your_username> -d '{"scopes": ["repo"]}' \
        https://api.github.com/authorizations

    HTTP/1.1 201 Created
    Location: https://api.github.com/authorizations/2
    Content-Length: 384

    {
      "scopes": [
        "repo"
      ],
      "token": "5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4",
      "updated_at": "2012-11-14T14:04:24Z",
      "url": "https://api.github.com/authorizations/2",
      "app": {
        "url": "http://developer.github.com/v3/oauth/#oauth-authorizations-api",
        "name": "GitHub API"
      },
      "created_at": "2012-11-14T14:04:24Z",
      "note_url": null,
      "id": 2,
      "note": null
    }

There's a lot going on in this one little call, so let's break it down. First, <span class="marker">the -d flag indicates we're doing a POST</span>, using the application/x-www-form-urlencoded content type (as opposed to GET). All POST requests to the GitHub API should be in JSON.

Next, let's look at the scopes we're sending over in this call. When creating a new token, we include an optional array of [scopes](http://developer.github.com/v3/oauth/#scopes), or access levels, that indicate what information this token can access. In this case, we're setting up the token with repo access, which grants access to read and write to private repositories. See [the scopes docs](http://developer.github.com/v3/oauth/#scopes) for a full list of scopes. You should only request scopes that your application actually needs, in order to not frighten users with potentially invasive actions. The 201 status code tells us that the call was successful, and the JSON returned contains the details of our new OAuth token.

If you have [two-factor authentication](https://help.github.com/articles/about-two-factor-authentication) enabled, the API will return the [previously described 401 Unauthorized error code](http://developer.github.com/guides/getting-started/#two-factor-authentication) for the above request. You can get around that error by providing a 2FA OTP code in the [X-GitHub-OTP request header](http://developer.github.com/v3/auth/#working-with-two-factor-authentication):

    $ curl -i -u <your_username> -H "X-GitHub-OTP: <your_2fa_OTP_code>" \
        -d '{"scopes": ["repo"]}' https://api.github.com/authorizations

If you enabled 2FA with a mobile application, go ahead and get an OTP code from your one-time password application on your phone. If you enabled 2FA with text messages, you’ll receive an SMS with your OTP code after making a request to this endpoint.

Now, we can use the forty character token instead of a username and password in the rest of our examples. Let's grab our own user info again, using OAuth this time:

    $ curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \
        https://api.github.com/user

Treat OAuth tokens like passwords! Don't share them with other users or store them in insecure places. The tokens in these examples are fake and the names have been changed to protect the innocent.

Now that we've got the hang of making authenticated calls, let's move along to the [Repositories API](http://developer.github.com/v3/repos/).

## Repositories

Almost any meaningful use of the GitHub API will involve some level of Repository information. We can [GET repository details](http://developer.github.com/v3/repos/#get) in the same way we fetched user details earlier:

    $ curl -i https://api.github.com/repos/twbs/bootstrap

In the same way, we can [view repositories for the authenticated user](http://developer.github.com/v3/repos/#list-your-repositories):

    $ curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \
        https://api.github.com/user/repos

Or, we can [list repositories for another user](http://developer.github.com/v3/repos/#list-user-repositories):

    $ curl -i https://api.github.com/users/technoweenie/repos

Or, we can [list repositories for an organization](http://developer.github.com/v3/repos/#list-organization-repositories):

    $ curl -i https://api.github.com/orgs/mozilla/repos

The information returned from these calls will depend on how we authenticate:

*   Using Basic Authentication, the response includes all repositories the the user has access to see on github.com.
*   Using OAuth, private repositories are only returned if the OAuth token contains the repo[scope](http://developer.github.com/v3/oauth/#scopes).

As the [docs](http://developer.github.com/v3/repos/) indicate, these methods take a type parameter that can filter the repositories returned based on what type of access the user has for the repository. In this way, we can fetch only directly-owned repositories, organization repositories, or repositories the user collaborates on via a team.

    $ curl -i "https://api.github.com/users/technoweenie/repos?type=owner"

In this example, we grab only those repositories that technoweenie owns, not the ones on which he collaborates. Note the quoted URL above. Depending on your shell setup, cURL sometimes requires a quoted URL or else it ignores the query string.

### Create a repository

Fetching information for existing repositories is a common use case, but the GitHub API supports creating new repositories as well. To [create a repository](http://developer.github.com/v3/repos/#create), we need to POST some JSON containing the details and configuration options.

    $ curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \
        -d '{ \
            "name": "blog", \
            "auto_init": true, \
            "private": true, \
            "gitignore_template": "nanoc" \
          }' \
        https://api.github.com/user/repos

In this minimal example, we create a new repository for our blog (to be served on [GitHub Pages](http://pages.github.com/), perhaps). Though the blog will be public, we’ve made the repository private. In this single step, we’ll also initialize it with a README and a [nanoc](http://nanoc.stoneship.org/)-flavored [.gitignore template](https://github.com/github/gitignore).

The resulting repository will be found at https://github.com/<your_username>/blog. To create a repository under an organization for which you’re an owner, just change the API method from /user/repos to /orgs/<org_name>/repos.

Next, let's fetch our newly created repository:

    $ curl -i https://api.github.com/repos/pengwynn/blog

    HTTP/1.1 404 Not Found

    {
        "message": "Not Found"
    }

Oh noes! Where did it go? Since we created the repository as private, we need to authenticate in order to see it. If you're a grizzled HTTP user, you might expect a 403 instead. Since we don't want to leak information about private repositories, the GitHub API returns a 404 in this case, as if to say “we can neither confirm nor deny the existence of this repository.”